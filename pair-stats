#!/usr/bin/env ruby

require 'open3'

class PairStats
  GIT_LOG_COMMAND = "git log --format='%ci|%an' --since='30 days ago'"

  def analyze(author)
    @author = author
    parse_log

    unless unique_authors.include?(@author)
      puts "No commits for #{author} found between #{(Date.today - 30).to_s} and #{Date.today.to_s}\n"
      puts "Valid authors: #{unique_authors.join(", ")}" if unique_authors.size > 0
      exit
    end

    puts "Pairing stats for #{author} since #{(Date.today - 30).to_s}\n\n"
    puts "Developer            Days     Commits  %"
    puts "---------------      ----     -------  ---"
    stats.each do |stat|
      puts "%-20s %-8d %-8d %-1d%\n" % [stat[:author],
            stat[:days_paired],
            number_of_commits_with(stat[:author]),
            (stat[:days_paired].to_f / total_pair_days.to_f * 100)]
    end
  end

  private

    def parse_log
      output = sh(GIT_LOG_COMMAND)
      @commits = output.map do |commit|
        date, author = commit.split("|")
        { :date => Date.parse(date), :authors => author.split(/ and | ?& ?| ?, ?/) }
      end
    end

    def sh(command)
      output = ""
      Open3.popen3(command) do |stdin, stdout, stderr|
        while tmp = stdout.read(1024)
          output << tmp
        end
      end
      output.split("\n")
    end

    def unique_authors
      @commits.map { |commit| commit[:authors] }.flatten.compact.uniq
    end

    def other_authors
      unique_authors.reject { |author| author == @author }
    end

    def stats
      stats = other_authors.map do |author|
        commits_with_author = @commits.select do |commit|
          commit[:authors].include?(@author) && commit[:authors].include?(author)
        end
        { :author => author, :days_paired => count_days(commits_with_author) }
      end
      stats << {:author => "Solo", :days_paired => solo_days}
      stats.sort { |a,b| b[:days_paired] <=> a[:days_paired] }
    end

    def solo_days
      solo_commits = @commits.select do |commit|
        commit[:authors].size == 1 && commit[:authors].include?(@author)
      end

      count_days(solo_commits)
    end

    def count_days(commits)
      commits.map { |c| c[:date].to_s }.uniq.size
    end

    def total_pair_days
      stats.inject(0) { |sum, stat| sum + stat[:days_paired] }
    end

    def number_of_commits_with(author)
      if author == "Solo"
        @commits.select do |c|
          c[:authors].include?(@author) && c[:authors].size == 1
        end
      else
        @commits.select do |c|
          c[:authors].include?(@author) && c[:authors].include?(author)
        end
      end.size
    end

end

if ARGV.size == 0
  puts "Usage: pair-stats <full name>"
  exit
end

PairStats.new.analyze(ARGV.join(" "))
